
// For those who want the bleeding edge
buildscript {
    repositories {
        mavenCentral()

        maven {
            url "https://repo.spongepowered.org/maven"
        }

        maven {
            url "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
//        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
//apply plugin: 'com.github.johnrengelman.shadow'


/*
// for people who want stable - not yet functional for MC 1.8.8 - we require the forgegradle 2.1 snapshot
plugins {
    id "net.minecraftforge.gradle.forge" version "2.0.2"
}
*/
version = "1.0"
group= "top.whitecola.kateclient" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "kateclient"

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "stable_20"
//    makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    clientJvmArgs += '-Dfml.coreMods.load=top.whitecola.kateclient.injection.MixinLoader'

}

mixin {
    defaultObfuscationEnv searge
    sourceSets {
        main {
            ext.refMap = 'mixins.kateclient.refmap.json'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url 'https://repo.spongepowered.org/maven'
    }
}

configurations {
    // Adds a reference so that we extend/add on to it with depends so we can grab them and compile them into the jar.
    embedded
    // Grabs what's extended/added on from/to embed and compiles it into the jar when being built.
    compile.extendsFrom embedded
}

dependencies {
    embedded('org.spongepowered:mixin:0.6.5-SNAPSHOT') {

        // Excludes unneeded stuff.
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'jarjar'
        exclude module: 'commons-codec'
        exclude module: 'commons-io'
        exclude module: 'launchwrapper'
        exclude module: 'asm-commons'
        exclude module: 'slf4j-api'
    }
}

//shadowJar {
//    baseName = 'KateClient'
//    classifier = null
//    version = null
//    dependencies {
//        include(dependency('org.spongepowered:mixin:0.6.5-SNAPSHOT'))
//    }
//}

processResources
        {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            // replace stuff in mcmod.info, nothing else
            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'

                // replace version and mcversion
                expand 'version':project.version, 'mcversion':project.minecraft.version
            }

            // copy everything else, thats not the mcmod.info
            from(sourceSets.main.resources.srcDirs) {
                exclude 'mcmod.info'
            }
        }

jar{
    from(configurations.embedded.collect {
        it.isDirectory() ? it : zipTree(it)
    }) {
        exclude 'dummyThing',
                'LICENSE.txt'
    }

//    from{
//        configurations.embedded.collect {it.isDirectory() ? it : zipTree(it)}
//        exclude 'dummyThing',
//                'LICENSE.txt',
//    }

    manifest.attributes(
            'MixinConfigs': 'mixins.kateclient.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 1,
            'FMLCorePluginContainsFMLMod': 'false',
            'FMLCorePlugin': 'top.whitecola.kateclient.injection.MixinLoader',
            'ForceLoadAsMod': 'true'
    )
}


